#when we wanna change the state inside of a class we have to use setState:
	this.setState({message:"sag khor"})
	
#life cycle methods : mounting- unmounting - updating - error handling
	mounting:
		constructor
		render
		componentDidMount
	updating: when data is changed and we need rerender
		shouldComponentUpdate: default is set to True
		render
		componentDidUpdate
	unmounting: we use them when one component is being removed from the dom
		for exam
		componentWillUnmount
	error-handling:
		componentDidCatch
#hooks
	useState:
		const [songs, setSong] = useState([{title:'music one', id: 1}
											{title: 'music two' , id :2}])
		{songs.map(song => <li key={song.id}>{song.title}</li>)}
	useEffect:
# we can have conditionals using &&
	return this.state.isLoggedIn && <div> Welcome </div>

		
############################### how to work between 2 functional components using props#######################################################
							in the first file we have:
import React from 'react';

function Person (props){
    return(
        <div>
            <h2>
                I am {props.person.name}, I am {props.person.age} years old.
            </h2>
        </div>
    )
}

export default Person;

						in the second file(parent file) we have:
import React from 'react';
import Person from './Person';

function NameList () {
    const persons = [
        {
            id:1,
            name:'Ali',
            age:20 
        },
        {
            id:2,
            name:'Reza',
            age:25 
        },
        {
            id:3,
            name:'Maryam',
            age:30 
        }
    ]
    const personList = persons.map (person => <Person key={person.id} person={person}/>)
    return (
        <div>
            {personList}
        </div>
    )
}

export default NameList;
##############################################################################################
					how to write a form 
import React, { Component } from 'react';

class Form extends Component {
    state = { 
        username:'',
        comment:'',
        select:'React'
     }

     handleUsernameChange =(event)=>{
         this.setState({
             username:event.target.value
         })
     }

     handleCommentChange =(event)=>{
        this.setState({
            comment:event.target.value
        })
    }

    handleSelectChange =(event)=>{
        this.setState({
            select:event.target.value
        })
    }
    handleSubmit = (event)=>{
        alert(
            [this.state.username,
            this.state.comment,
            this.state.select]
        )
        event.preventDefault();
    }
    render() { 
        return ( 
            <form onSubmit={this.handleSubmit}>
                <div>
                    <label>Username :</label>
                    <input type="text" value={this.state.username} 
                        onChange={this.handleUsernameChange}
                    />
                </div>
                <div>
                    <label>Comments :</label>
                    <textarea
                     value ={this.state.comment}
                     onChange={this.handleCommentChange}
                    />
                </div>
                <div>
                    <label>Topic :</label>
                    <select value={this.state.select} onChange={this.handleSelectChange}>
                        <option value="react">React</option>
                        <option value="angular">Angular</option>
                        <option value="vue">Vue</option>
                    </select>
                </div>
                <button type="submit">send</button>
            </form>
         );
    }
}
 
export default Form;
######################################################################################################


